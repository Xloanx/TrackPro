// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

enum Role {
  CUSTOMER
  AGENT
  ADMIN
}

model Issue {
  id           Int      @id @default(autoincrement())
  title        String   @db.VarChar(255)
  description  String   @db.Text
  status       Status   @default(OPEN)
  priority     Priority @default(LOW)
  reporterId   String?  @db.VarChar(255)
  reporter     User?    @relation(name: "Reporter", fields: [reporterId], references: [id])
  assignedToId String?  @db.VarChar(255)
  assignedTo   User?    @relation(name: "Assignee", fields: [assignedToId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id             String       @id @default(cuid())
  name           String?
  email          String       @unique
  passwordHash   String
  contactInfoId  String?      @db.VarChar(255)
  contactInfo    ContactInfo? @relation(fields: [contactInfoId], references: [id])
  emailVerified  DateTime?
  image          String?
  role           Role         @default(CUSTOMER)
  accounts       Account[]
  sessions       Session[]
  reportedIssues Issue[]      @relation(name: "Reporter")
  assignedIssues Issue[]      @relation(name: "Assignee")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Customer   Customer? @relation(fields: [customerId], references: [id])
  // customerId String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Customer     Customer? @relation(fields: [customerId], references: [id])
  // customerId   String?
}

model ContactInfo {
  id      String @id @default(cuid())
  phone   String
  address String
  city    String
  country String
  User    User[]
  // Customer Customer[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
